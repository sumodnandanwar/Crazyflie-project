#!/usr/bin/env python

from os.path import expanduser
import rospy
from aruco_msgs.msg import MarkerArray, Marker
import tf2_ros
import tf2_geometry_msgs
from geometry_msgs.msg import PoseWithCovariance, PoseStamped, TransformStamped
from crazyflie_driver.msg import Position
import math
from tf.transformations import euler_from_quaternion, quaternion_from_euler

currentPose = None
latestCmd = None

def updatePose(pose):
    global currentPose
    currentPose = pose.pose


def buildCmd(marker_odom):
    global latestCmd, currentPose
    cmd = Position()

    cmd.header.stamp = rospy.Time.now()
    cmd.header.frame_id = "cf1/odom"

    cmd.x = marker_odom.pose.position.x
    cmd.y = marker_odom.pose.position.y
    cmd.z = marker_odom.pose.position.z

    _, _, yaw = euler_from_quaternion((marker_odom.pose.orientation.x,
                                       marker_odom.pose.orientation.y,
                                       marker_odom.pose.orientation.z,
                                       marker_odom.pose.orientation.w))

    cmd.yaw = math.degrees(yaw)
    rospy.loginfo("Updated cmd pose####")
    latestCmd = cmd


def moveDrone(arucoFrame):
    global currentPose, latestCmd
    marker = PoseStamped()
    marker.header.frame_id = arucoFrame

    marker.pose.orientation.w = 1

    marker_odom = tf_buf.transform(marker, "cf1/odom", rospy.Duration(0.1))

    buildCmd(marker_odom)    


# Setup node, subscribers and tf2 buffers
rospy.init_node('followarucomarker')
sub_currentPose = rospy.Subscriber('/cf1/pose', PoseStamped, updatePose)
pub_cmd = rospy.Publisher('/cf1/cmd_position', Position, queue_size=2)

tf_buf   = tf2_ros.Buffer()
tf_lstn  = tf2_ros.TransformListener(tf_buf)


def main():
    global latestCmd, currentPose
    rate = rospy.Rate(10)

    while currentPose == None: # Wait for 1st cf1/pose to be received
        continue

    baseCmd = Position()

    baseCmd.header.stamp = rospy.Time.now()
    baseCmd.header.frame_id = "cf1/odom"
    baseCmd.x = currentPose.position.x
    baseCmd.y = currentPose.position.y
    baseCmd.z = 0.4

    latestCmd = baseCmd


    while not rospy.is_shutdown():
        for id in ["1", "2", "3", "4", "5", "6"]:
            arucoFrame = "aruco/detected" + id + "/offset"
            if tf_buf.can_transform(arucoFrame, "cf1/odom", rospy.Time(0)):
                moveDrone(arucoFrame)
        rate.sleep()
        pub_cmd.publish(latestCmd)

    

if __name__ == '__main__':
    main()
